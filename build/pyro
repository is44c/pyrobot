# pyro/bin/pyro is automatically generated!
# -----------------------------------
# Pyro - robotics control system in Python

import os 
import sys 
# Where are we? Add ../../cwd to our PYTHON search path
if sys.argv[0][0] == '/':
    cwd = sys.argv[0]
else:
    cwd = os.getcwd() + '/' + sys.argv[0]
(binpath,spare) = os.path.split(cwd) # peel off pyro filename
(pyropath,spare) = os.path.split(binpath) # peel off bin dir
(path,spare) = os.path.split(pyropath) # peel off pyro dir
sys.path.insert(0, path) # put PARENT at front of list PARENT/pyro/bin/pyro
if not os.environ.has_key('PYRO'):
    os.environ['PYRO'] = pyropath 
if os.environ.has_key('LD_LIBRARY_PATH'):
    os.environ['LD_LIBRARY_PATH'] += (':' + pyropath + '/lib')
else:
    os.environ['LD_LIBRARY_PATH'] = (pyropath + '/lib')
os.putenv('LD_LIBRARY_PATH', pyropath + '/lib')

try:
    from pyro.system import share
    from pyro.engine import *
except ImportError:
    raise "$PYTHONPATH needs to include dir ABOVE where $PYRO is installed"

robotfile = 0
brainfile = 0
window = 'GL'
brainargs = []
simulator = 0
configfile = 0

def basichelp():
    print "You may need to define the PYRO environment variable. Try:"
    print "         export PYRO=/usr/local/pyro"
    print "or maybe export PYRO=~/pyro"
    print ""
    print "Also, make sure PYRO is in PYTHONPATH. Try:"
    print "         export PYTHONPATH=$PYTHONPATH:$PYRO/bin"

try:
    import pyro
except:
    import sys
    basichelp()
    sys.exit(1)


def process_options():
    import getopt, sys, string
    global robotfile, brainfile, window, simulator, brainargs, configfile
    try:
        opts, args = getopt.getopt(sys.argv[1:], \
                                   "r:b:hg:s:o:c:", \
                                   ["robot", "brain", "help", \
                                    "load", "gui", "sim", "brain-args",\
                                    "config"])
    except getopt.GetoptError:
        # print help information and exit:
        pyro.system.usage()
        sys.exit(1)

    for o, a in opts:
        if o in ("-h", "--help"):
            pyro.system.usage()
            sys.exit(1)
        elif o in ("-g", "--gui"):
            window = string.upper(a)
        elif o in ("-r", "--robot"):
            robotfile = a
        elif o in ("-s", "--sim"):
            simulator = a
        elif o in ("-b", "--brain"):
            brainfile = a
	elif o in ("-o", "--brain-args"):
            brainargs = a.split(":")
	elif o in ("-c", "--config"):
            configfile = a

if pyro.startup_check():
    import pyro.system
    from pyro.system.config import Configuration
    process_options()
    c = Configuration(configfile)
    if configfile:
        c.put('config', 'file', configfile)
    if not robotfile:
        robotfile = c.get('robot', 'file')
    else:
        c.put('robot', 'file', robotfile)
    if not simulator:
        simulator = c.get('simulator', 'file')
    else:
        c.put('simulator', 'file', simulator)
    if not brainfile:
        brainfile = c.get('brain', 'file')
    else:
        c.put('brain', 'file', brainfile)
    if not brainargs:
        brainargs = c.get('brain', 'args')
    else:
        c.put('brain', 'args', brainargs)
    share.config = c
    eng = Engine(robotfile, brainfile, simulator, brainargs, c)
    if window == 'GL':
        from pyro.gui.GL import *
        gui = GLgui(eng)
        gui.win.redraw = gui.redraw
    elif window == 'TK':
        from pyro.gui.GL import *
        gui = GLgui(eng, mode = 0)
        gui.win.redraw = gui.redraw
    elif window == 'TTY':
        gui = pyro.gui.gui("tty gui", {}, eng)
    elif window == 'CURSES':
        from pyro.gui.Curses import Curses as Curses
        gui = Curses("curses gui", {}, eng)

    gui.init()
    gui.run()
    gui.cleanup()
else:
    basichelp()
