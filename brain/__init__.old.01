# a basic brain class


import thread
import threading
import time
import pyro.gui.console
#from pyro.gui.drawable import Drawable

#PYTHON ERROR: Brain should be subclass of Drawable, but that stores
#its data in "self.data", and that is where thread gets its hash value
#name.

class Brain(threading.Thread): #, Drawable):
    def __init__(self, name = 'brain'):
        threading.Thread.__init__(self)
        #Drawable.__init__(self, name)
        self.name = name
	self.thread = 0
        self.condition = threading.Condition()
        self.needToStop = 1
        self.needToQuit = 0
        self.needToStep = 0
        self.start()

    def _draw(self, options, renderer):
        pass
    
    def run(self):
        while self.isAlive() and self.needToQuit is not 1:
            print "Acquire ----------------------------"
            print "needToQuit:", self.needToQuit
            gotit = self.condition.acquire(1)
            #if gotit == 0:
            #    continue
            #raise "Can't get acquire() in run"
            if self.needToQuit:
                self.condition.release()
                print "Return  ----------------------------"
                return
            elif self.needToStep > 0:
                self.needToStep -= 1 #protectedvariable
                self.needToStop = 1 #will be picked up next pass
            elif self.needToStop:
                self.condition.wait()
                self.condition.release()
                continue #check for quit before we step
            
            self.step()
            self.condition.release()
            print "Return  ----------------------------"
            #print self.needToStep
        print "End of run!"

    def pleaseQuit(self):
        self.needToQuit = 1

    def pleaseStep(self):
        self.needToStep += 1 #protected variable
        #self.condition.acquire()
        #self.condition.notify()
        #self.condition.release()
        self.pleaseRun()
        
    def pleaseStop(self):
	self.needToStop = 1
        #gotit = self.condition.acquire(1)
        #if gotit == 0:
        #    raise "Can't get acquire() in pleaseStop"
        
        #self.condition.notify()
        #self.condition.release()
        
    def pleaseRun(self, callback = 0):
        if not self.isAlive():
            gui.console.log(gui.console.WARN,"Brain thread is not alive but request to run was made.");
        self.needToStop = 0
        #gotit = self.condition.acquire(1)
        #if gotit == 0:
        #    raise "Can't get acquire() in pleaseRun"
        #self.condition.notify()
        #self.condition.release()
        if callback != 0:
            callback()
		
    def step(self):
        print "need to override pyro.brain.Brain.step()."
        time.sleep(1)
