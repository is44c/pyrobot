# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _aibo
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


MAXDEPTH = _aibo.MAXDEPTH
class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _aibo.new_Device(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _aibo.delete_Device
    __del__ = lambda self : None;
    def initialize(*args): return _aibo.Device_initialize(*args)
    def getRGB(*args): return _aibo.Device_getRGB(*args)
    def setRGB(*args): return _aibo.Device_setRGB(*args)
    def getWidth(*args): return _aibo.Device_getWidth(*args)
    def getHeight(*args): return _aibo.Device_getHeight(*args)
    def getDepth(*args): return _aibo.Device_getDepth(*args)
    def getImage(*args): return _aibo.Device_getImage(*args)
    def getByte(*args): return _aibo.Device_getByte(*args)
Device_swigregister = _aibo.Device_swigregister
Device_swigregister(Device)

class AiboCam(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AiboCam, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AiboCam, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _aibo.new_AiboCam(*args)
        try: self.this.append(this)
        except: self.this = this
    def updateMMap(*args): return _aibo.AiboCam_updateMMap(*args)
    __swig_setmethods__["sock"] = _aibo.AiboCam_sock_set
    __swig_getmethods__["sock"] = _aibo.AiboCam_sock_get
    if _newclass:sock = _swig_property(_aibo.AiboCam_sock_get, _aibo.AiboCam_sock_set)
    __swig_setmethods__["lock"] = _aibo.AiboCam_lock_set
    __swig_getmethods__["lock"] = _aibo.AiboCam_lock_get
    if _newclass:lock = _swig_property(_aibo.AiboCam_lock_get, _aibo.AiboCam_lock_set)
    __swig_setmethods__["tcp"] = _aibo.AiboCam_tcp_set
    __swig_getmethods__["tcp"] = _aibo.AiboCam_tcp_get
    if _newclass:tcp = _swig_property(_aibo.AiboCam_tcp_get, _aibo.AiboCam_tcp_set)
    __swig_destroy__ = _aibo.delete_AiboCam
    __del__ = lambda self : None;
AiboCam_swigregister = _aibo.AiboCam_swigregister
AiboCam_swigregister(AiboCam)

class Socket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Socket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Socket, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _aibo.new_Socket(*args)
        try: self.this.append(this)
        except: self.this = this
    def read(*args): return _aibo.Socket_read(*args)
    def readUntil(*args): return _aibo.Socket_readUntil(*args)
    def write(*args): return _aibo.Socket_write(*args)
    __swig_setmethods__["host"] = _aibo.Socket_host_set
    __swig_getmethods__["host"] = _aibo.Socket_host_get
    if _newclass:host = _swig_property(_aibo.Socket_host_get, _aibo.Socket_host_set)
    __swig_destroy__ = _aibo.delete_Socket
    __del__ = lambda self : None;
Socket_swigregister = _aibo.Socket_swigregister
Socket_swigregister(Socket)

class FakeSocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FakeSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FakeSocket, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _aibo.new_FakeSocket(*args)
        try: self.this.append(this)
        except: self.this = this
    def read(*args): return _aibo.FakeSocket_read(*args)
    def readUntil(*args): return _aibo.FakeSocket_readUntil(*args)
    __swig_destroy__ = _aibo.delete_FakeSocket
    __del__ = lambda self : None;
FakeSocket_swigregister = _aibo.FakeSocket_swigregister
FakeSocket_swigregister(FakeSocket)



