/*
 * FILE : lowlevelmodule.cc
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/***********************************************************************
 * $Header$
 * swig_lib/python/python.cfg
 *
 * This file contains coded needed to add variable linking to the
 * Python interpreter.   C variables are added as a new kind of Python
 * datatype.
 *
 * Also contains supporting code for building python under Windows
 * and things like that.
 *
 * $Log$
 * Revision 1.1  2002/03/26 02:57:23  dblank
 * Initial revision
 *
 * Revision 1.1.1.1  2001/10/30 09:47:21  dblank
 * new version on emergent
 *
 ************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif
#include "Python.h"
#ifdef __cplusplus
}
#endif

/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

typedef struct {
  char  *name;
  PyObject *(*get_attr)(void);
  int (*set_attr)(PyObject *);
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar **vars;
  int      nvars;
  int      maxvars;
} swig_varlinkobject;

/* ----------------------------------------------------------------------
   swig_varlink_repr()

   Function for python repr method
   ---------------------------------------------------------------------- */

static PyObject *
swig_varlink_repr(swig_varlinkobject *v)
{
  v = v;
  return PyString_FromString("<Global variables>");
}

/* ---------------------------------------------------------------------
   swig_varlink_print()

   Print out all of the global variable names
   --------------------------------------------------------------------- */

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags)
{

  int i = 0;
  flags = flags;
  fprintf(fp,"Global variables { ");
  while (v->vars[i]) {
    fprintf(fp,"%s", v->vars[i]->name);
    i++;
    if (v->vars[i]) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

/* --------------------------------------------------------------------
   swig_varlink_getattr
 
   This function gets the value of a variable and returns it as a
   PyObject.   In our case, we'll be looking at the datatype and
   converting into a number or string
   -------------------------------------------------------------------- */

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n)
{
  int i = 0;
  char temp[128];

  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->get_attr)();
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return NULL;
}

/* -------------------------------------------------------------------
   swig_varlink_setattr()

   This function sets the value of a variable.
   ------------------------------------------------------------------- */

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p)
{
  char temp[128];
  int i = 0;
  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->set_attr)(p);
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return 1;
}

statichere PyTypeObject varlinktype = {
/*  PyObject_HEAD_INIT(&PyType_Type)  Note : This doesn't work on some machines */
  PyObject_HEAD_INIT(0)              
  0,
  "varlink",                          /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */

SWIGSTATIC PyObject *
SWIG_newvarlink(void)
{
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  /*  _Py_NewReference(result);  Does not seem to be necessary */
  result->nvars = 0;
  result->maxvars = 64;
  result->vars = (swig_globalvar **) malloc(64*sizeof(swig_globalvar *));
  result->vars[0] = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGSTATIC void
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p))
{
  swig_varlinkobject *v;
  v= (swig_varlinkobject *) p;
	
  if (v->nvars >= v->maxvars -1) {
    v->maxvars = 2*v->maxvars;
    v->vars = (swig_globalvar **) realloc(v->vars,v->maxvars*sizeof(swig_globalvar *));
    if (v->vars == NULL) {
      fprintf(stderr,"SWIG : Fatal error in initializing Python module.\n");
      exit(1);
    }
  }
  v->vars[v->nvars] = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  v->vars[v->nvars]->name = (char *) malloc(strlen(name)+1);
  strcpy(v->vars[v->nvars]->name,name);
  v->vars[v->nvars]->get_attr = get_attr;
  v->vars[v->nvars]->set_attr = set_attr;
  v->nvars++;
  v->vars[v->nvars] = 0;
}



/*****************************************************************************
 * $Header$
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif


/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start >= end) sp = 0;
	  /* Try to find a match for this */
	  if (sp) {
	    while (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strcpy(temp_type,tp->name);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	      sp++;
	      /* Hmmm. Didn't find it this time */
	    }
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr

#define SWIG_init    initlowlevel

#define SWIG_name    "lowlevel"
 
#include"Saphira.h"
#define SFData_x_set(_swigobj,_swigval) (_swigobj->x = _swigval,_swigval)
static PyObject *_wrap_SFData_x_set(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    SFData * _arg0;
    double  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sd:SFData_x_set",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_x_set. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (double )SFData_x_set(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define SFData_x_get(_swigobj) ((double ) _swigobj->x)
static PyObject *_wrap_SFData_x_get(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    SFData * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:SFData_x_get",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_x_get. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (double )SFData_x_get(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define SFData_y_set(_swigobj,_swigval) (_swigobj->y = _swigval,_swigval)
static PyObject *_wrap_SFData_y_set(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    SFData * _arg0;
    double  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sd:SFData_y_set",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_y_set. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (double )SFData_y_set(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define SFData_y_get(_swigobj) ((double ) _swigobj->y)
static PyObject *_wrap_SFData_y_get(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    SFData * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:SFData_y_get",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_y_get. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (double )SFData_y_get(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define SFData_z_set(_swigobj,_swigval) (_swigobj->z = _swigval,_swigval)
static PyObject *_wrap_SFData_z_set(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    SFData * _arg0;
    double  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sd:SFData_z_set",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_z_set. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (double )SFData_z_set(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define SFData_z_get(_swigobj) ((double ) _swigobj->z)
static PyObject *_wrap_SFData_z_get(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    SFData * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:SFData_z_get",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_z_get. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (double )SFData_z_get(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define SFData_range_set(_swigobj,_swigval) (_swigobj->range = _swigval,_swigval)
static PyObject *_wrap_SFData_range_set(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    SFData * _arg0;
    double  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sd:SFData_range_set",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_range_set. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (double )SFData_range_set(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define SFData_range_get(_swigobj) ((double ) _swigobj->range)
static PyObject *_wrap_SFData_range_get(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    SFData * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:SFData_range_get",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_range_get. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (double )SFData_range_get(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define SFData_flag_set(_swigobj,_swigval) (_swigobj->flag = _swigval,_swigval)
static PyObject *_wrap_SFData_flag_set(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    SFData * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:SFData_flag_set",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_flag_set. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (int )SFData_flag_set(_arg0,_arg1);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define SFData_flag_get(_swigobj) ((int ) _swigobj->flag)
static PyObject *_wrap_SFData_flag_get(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    SFData * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:SFData_flag_get",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of SFData_flag_get. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (int )SFData_flag_get(_arg0);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define new_Saphira() (new Saphira())
static PyObject *_wrap_new_Saphira(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Saphira * _result;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,":new_Saphira")) 
        return NULL;
    _result = (Saphira *)new_Saphira();
    SWIG_MakePtr(_ptemp, (char *) _result,"_Saphira_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define delete_Saphira(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_Saphira(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:delete_Saphira",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_Saphira. Expected _Saphira_p.");
        return NULL;
        }
    }
    delete_Saphira(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define Saphira__getSonarRange(_swigobj,_swigarg0)  (_swigobj->_getSonarRange(_swigarg0))
static PyObject *_wrap_Saphira__getSonarRange(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira__getSonarRange",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira__getSonarRange. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira__getSonarRange(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira__getSonarXCoord(_swigobj,_swigarg0)  (_swigobj->_getSonarXCoord(_swigarg0))
static PyObject *_wrap_Saphira__getSonarXCoord(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira__getSonarXCoord",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira__getSonarXCoord. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira__getSonarXCoord(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira__getSonarYCoord(_swigobj,_swigarg0)  (_swigobj->_getSonarYCoord(_swigarg0))
static PyObject *_wrap_Saphira__getSonarYCoord(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira__getSonarYCoord",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira__getSonarYCoord. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira__getSonarYCoord(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_getSonarRange(_swigobj,_swigarg0)  (_swigobj->getSonarRange(_swigarg0))
static PyObject *_wrap_Saphira_getSonarRange(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira_getSonarRange",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getSonarRange. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_getSonarRange(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_getSonarXCoord(_swigobj,_swigarg0)  (_swigobj->getSonarXCoord(_swigarg0))
static PyObject *_wrap_Saphira_getSonarXCoord(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira_getSonarXCoord",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getSonarXCoord. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_getSonarXCoord(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_getSonarYCoord(_swigobj,_swigarg0)  (_swigobj->getSonarYCoord(_swigarg0))
static PyObject *_wrap_Saphira_getSonarYCoord(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira_getSonarYCoord",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getSonarYCoord. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_getSonarYCoord(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_SonarData_set(_swigobj,_swigval) (_swigobj->SonarData = _swigval,_swigval)
static PyObject *_wrap_Saphira_SonarData_set(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    SFData * _result;
    Saphira * _arg0;
    SFData * _arg1;
    char * _argc0 = 0;
    char * _argc1 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"ss:Saphira_SonarData_set",&_argc0,&_argc1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_SonarData_set. Expected _Saphira_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_SFData_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of Saphira_SonarData_set. Expected _SFData_p.");
        return NULL;
        }
    }
    _result = (SFData *)Saphira_SonarData_set(_arg0,_arg1);
    SWIG_MakePtr(_ptemp, (char *) _result,"_SFData_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Saphira_SonarData_get(_swigobj) ((SFData *) _swigobj->SonarData)
static PyObject *_wrap_Saphira_SonarData_get(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    SFData * _result;
    Saphira * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_SonarData_get",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_SonarData_get. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (SFData *)Saphira_SonarData_get(_arg0);
    SWIG_MakePtr(_ptemp, (char *) _result,"_SFData_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Saphira_getX(_swigobj)  (_swigobj->getX())
static PyObject *_wrap_Saphira_getX(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_getX",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getX. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_getX(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_getY(_swigobj)  (_swigobj->getY())
static PyObject *_wrap_Saphira_getY(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_getY",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getY. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_getY(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_getZ(_swigobj)  (_swigobj->getZ())
static PyObject *_wrap_Saphira_getZ(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_getZ",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getZ. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_getZ(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_getTh(_swigobj)  (_swigobj->getTh())
static PyObject *_wrap_Saphira_getTh(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_getTh",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getTh. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_getTh(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_getThr(_swigobj)  (_swigobj->getThr())
static PyObject *_wrap_Saphira_getThr(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_getThr",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getThr. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_getThr(_arg0);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_Disconnect(_swigobj)  (_swigobj->Disconnect())
static PyObject *_wrap_Saphira_Disconnect(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_Disconnect",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_Disconnect. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_Disconnect(_arg0);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_Connect(_swigobj,_swigarg0)  (_swigobj->Connect(_swigarg0))
static PyObject *_wrap_Saphira_Connect(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    int  _arg1 = 1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s|i:Saphira_Connect",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_Connect. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_Connect(_arg0,_arg1);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_Move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->Move(_swigarg0,_swigarg1))
static PyObject *_wrap_Saphira_Move(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    double  _arg1;
    double  _arg2;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sdd:Saphira_Move",&_argc0,&_arg1,&_arg2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_Move. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_Move(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_Rotate(_swigobj,_swigarg0)  (_swigobj->Rotate(_swigarg0))
static PyObject *_wrap_Saphira_Rotate(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    double  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sd:Saphira_Rotate",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_Rotate. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_Rotate(_arg0,_arg1);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_Translate(_swigobj,_swigarg0)  (_swigobj->Translate(_swigarg0))
static PyObject *_wrap_Saphira_Translate(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    double  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sd:Saphira_Translate",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_Translate. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_Translate(_arg0,_arg1);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_IsStall(_swigobj)  (_swigobj->IsStall())
static PyObject *_wrap_Saphira_IsStall(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_IsStall",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_IsStall. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_IsStall(_arg0);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_UpdatePosition(_swigobj)  (_swigobj->UpdatePosition())
static PyObject *_wrap_Saphira_UpdatePosition(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_UpdatePosition",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_UpdatePosition. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_UpdatePosition(_arg0);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_UpdateReading(_swigobj,_swigarg0)  (_swigobj->UpdateReading(_swigarg0))
static PyObject *_wrap_Saphira_UpdateReading(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira_UpdateReading",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_UpdateReading. Expected _Saphira_p.");
        return NULL;
        }
    }
    Saphira_UpdateReading(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define Saphira_UpdateReadings(_swigobj)  (_swigobj->UpdateReadings())
static PyObject *_wrap_Saphira_UpdateReadings(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_UpdateReadings",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_UpdateReadings. Expected _Saphira_p.");
        return NULL;
        }
    }
    Saphira_UpdateReadings(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define Saphira_Localize(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->Localize(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_Saphira_Localize(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Saphira * _arg0;
    double  _arg1;
    double  _arg2;
    double  _arg3;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sddd:Saphira_Localize",&_argc0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_Localize. Expected _Saphira_p.");
        return NULL;
        }
    }
    Saphira_Localize(_arg0,_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define Saphira_getSonarCount(_swigobj)  (_swigobj->getSonarCount())
static PyObject *_wrap_Saphira_getSonarCount(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Saphira_getSonarCount",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getSonarCount. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_getSonarCount(_arg0);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_setSonarFlag(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setSonarFlag(_swigarg0,_swigarg1))
static PyObject *_wrap_Saphira_setSonarFlag(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Saphira * _arg0;
    int  _arg1;
    int  _arg2;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sii:Saphira_setSonarFlag",&_argc0,&_arg1,&_arg2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_setSonarFlag. Expected _Saphira_p.");
        return NULL;
        }
    }
    Saphira_setSonarFlag(_arg0,_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define Saphira_getSonarFlag(_swigobj,_swigarg0)  (_swigobj->getSonarFlag(_swigarg0))
static PyObject *_wrap_Saphira_getSonarFlag(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira_getSonarFlag",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_getSonarFlag. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (int )Saphira_getSonarFlag(_arg0,_arg1);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Saphira_sonar_th(_swigobj,_swigarg0)  (_swigobj->sonar_th(_swigarg0))
static PyObject *_wrap_Saphira_sonar_th(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira_sonar_th",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_sonar_th. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_sonar_th(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_sonar_x(_swigobj,_swigarg0)  (_swigobj->sonar_x(_swigarg0))
static PyObject *_wrap_Saphira_sonar_x(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira_sonar_x",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_sonar_x. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_sonar_x(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define Saphira_sonar_y(_swigobj,_swigarg0)  (_swigobj->sonar_y(_swigarg0))
static PyObject *_wrap_Saphira_sonar_y(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    double  _result;
    Saphira * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:Saphira_sonar_y",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Saphira_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Saphira_sonar_y. Expected _Saphira_p.");
        return NULL;
        }
    }
    _result = (double )Saphira_sonar_y(_arg0,_arg1);
    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

static PyMethodDef lowlevelMethods[] = {
	 { "Saphira_sonar_y", _wrap_Saphira_sonar_y, 1 },
	 { "Saphira_sonar_x", _wrap_Saphira_sonar_x, 1 },
	 { "Saphira_sonar_th", _wrap_Saphira_sonar_th, 1 },
	 { "Saphira_getSonarFlag", _wrap_Saphira_getSonarFlag, 1 },
	 { "Saphira_setSonarFlag", _wrap_Saphira_setSonarFlag, 1 },
	 { "Saphira_getSonarCount", _wrap_Saphira_getSonarCount, 1 },
	 { "Saphira_Localize", _wrap_Saphira_Localize, 1 },
	 { "Saphira_UpdateReadings", _wrap_Saphira_UpdateReadings, 1 },
	 { "Saphira_UpdateReading", _wrap_Saphira_UpdateReading, 1 },
	 { "Saphira_UpdatePosition", _wrap_Saphira_UpdatePosition, 1 },
	 { "Saphira_IsStall", _wrap_Saphira_IsStall, 1 },
	 { "Saphira_Translate", _wrap_Saphira_Translate, 1 },
	 { "Saphira_Rotate", _wrap_Saphira_Rotate, 1 },
	 { "Saphira_Move", _wrap_Saphira_Move, 1 },
	 { "Saphira_Connect", _wrap_Saphira_Connect, 1 },
	 { "Saphira_Disconnect", _wrap_Saphira_Disconnect, 1 },
	 { "Saphira_getThr", _wrap_Saphira_getThr, 1 },
	 { "Saphira_getTh", _wrap_Saphira_getTh, 1 },
	 { "Saphira_getZ", _wrap_Saphira_getZ, 1 },
	 { "Saphira_getY", _wrap_Saphira_getY, 1 },
	 { "Saphira_getX", _wrap_Saphira_getX, 1 },
	 { "Saphira_SonarData_get", _wrap_Saphira_SonarData_get, 1 },
	 { "Saphira_SonarData_set", _wrap_Saphira_SonarData_set, 1 },
	 { "Saphira_getSonarYCoord", _wrap_Saphira_getSonarYCoord, 1 },
	 { "Saphira_getSonarXCoord", _wrap_Saphira_getSonarXCoord, 1 },
	 { "Saphira_getSonarRange", _wrap_Saphira_getSonarRange, 1 },
	 { "Saphira__getSonarYCoord", _wrap_Saphira__getSonarYCoord, 1 },
	 { "Saphira__getSonarXCoord", _wrap_Saphira__getSonarXCoord, 1 },
	 { "Saphira__getSonarRange", _wrap_Saphira__getSonarRange, 1 },
	 { "delete_Saphira", _wrap_delete_Saphira, 1 },
	 { "new_Saphira", _wrap_new_Saphira, 1 },
	 { "SFData_flag_get", _wrap_SFData_flag_get, 1 },
	 { "SFData_flag_set", _wrap_SFData_flag_set, 1 },
	 { "SFData_range_get", _wrap_SFData_range_get, 1 },
	 { "SFData_range_set", _wrap_SFData_range_set, 1 },
	 { "SFData_z_get", _wrap_SFData_z_get, 1 },
	 { "SFData_z_set", _wrap_SFData_z_set, 1 },
	 { "SFData_y_get", _wrap_SFData_y_get, 1 },
	 { "SFData_y_set", _wrap_SFData_y_set, 1 },
	 { "SFData_x_get", _wrap_SFData_x_get, 1 },
	 { "SFData_x_set", _wrap_SFData_x_set, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void,initlowlevel)() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 m = Py_InitModule("lowlevel", lowlevelMethods);
	 d = PyModule_GetDict(m);
/*
 * These are the pointer type-equivalency mappings. 
 * (Used by the SWIG pointer type-checker).
 */
	 SWIG_RegisterMapping("_signed_long","_long",0);
	 SWIG_RegisterMapping("_long","_unsigned_long",0);
	 SWIG_RegisterMapping("_long","_signed_long",0);
	 SWIG_RegisterMapping("_class_Saphira","_Saphira",0);
	 SWIG_RegisterMapping("_unsigned_long","_long",0);
	 SWIG_RegisterMapping("_signed_int","_int",0);
	 SWIG_RegisterMapping("_unsigned_short","_short",0);
	 SWIG_RegisterMapping("_signed_short","_short",0);
	 SWIG_RegisterMapping("_SFData","_class_SFData",0);
	 SWIG_RegisterMapping("_unsigned_int","_int",0);
	 SWIG_RegisterMapping("_short","_unsigned_short",0);
	 SWIG_RegisterMapping("_short","_signed_short",0);
	 SWIG_RegisterMapping("_int","_unsigned_int",0);
	 SWIG_RegisterMapping("_int","_signed_int",0);
	 SWIG_RegisterMapping("_class_SFData","_SFData",0);
	 SWIG_RegisterMapping("_Saphira","_class_Saphira",0);
}
