
  {"super_red", super_red, METH_VARARGS, "Compute super red in place"},
  {"super_blue", super_blue, METH_VARARGS, "Compute super blue in place"},
  {"super_green", super_green, METH_VARARGS, "Compute super green in place"},
  {"super_magenta",super_magenta,METH_VARARGS,"Compute super magenta in place"},
  {"super_cyan",super_yellow, METH_VARARGS, "Compute super cyan in place"},
  {"super_yellow",super_yellow, METH_VARARGS, "Compute super yellow in place"},
  {"color_filter", color_filter, METH_VARARGS, "Compute color filter in place"},
  {"blobify", blobify, METH_VARARGS, "Compute max blob in place"},
  {"train_color", train_color, METH_VARARGS, "Get the best fitting color"},
  {"mean_blur", mean_blur, METH_VARARGS, "Perform Mean blur in place"},
  {"median_blur", median_blur, METH_VARARGS, "Perform Median blur in place"},
  {"gaussian_blur",gaussian_blur,METH_VARARGS,"Perform gaussianBlur in place"},
  {"train_color", train_color, METH_VARARGS, "Trains on a specific color"},
  {"save_image", save_image, METH_VARARGS, "Saves the buffer to a ppm image"},
  {"sobel", sobel, METH_VARARGS, "Performs simple edge detection"},
  {"grey_scale", grey_scale, METH_VARARGS, "Performs simple edge detection"},
